{"mappings":"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","sources":["src/index.js","src/js/keyMovieQuery.js","src/js/keyMovieFetch.js","<<jsx-config-pragma.js>>","src/js/backToTop.js"],"sourcesContent":["import './js/gallery-popular-films';\nimport { loader } from './js/loader';\nimport './js/teamModal.js';\n// import { modal_film } from './js/modal-film';\nimport { fetch } from './js/fetch-movie';\nimport { pagination } from './js/pagination';\nimport { keyMovieQuery } from './js/keyMovieQuery';\nimport './js/backToTop';\nimport './js/btn-in-modal';\nimport { darkOn } from './js/darkOn';\n","import KeyMovieFetch from './keyMovieFetch';\nimport { addToHTML, loadPage } from './gallery-popular-films';\nimport {\n  GENRES_FULL_INFO,\n  onPaginLoadMore,\n  requireData,\n} from './gallery-popular-films';\nimport { pagination } from './pagination';\nimport { topFunction } from './backToTop';\nimport { filmCheckImgUrl } from './functions-for-popular-gallery';\n\nconst refs = {\n  searchForm: document.querySelector('.header-search-form'),\n  gallery: document.querySelector('.gallery'),\n  searchMessage: document.querySelector('.header-message'),\n  page: document.querySelector('a[data-page=\"home\"]'),\n  paginationCont: document.getElementById('tui-pagination-container'),\n  // loadMoreBtn: document.querySelector('.load-more'),\n};\nlet SEARCH_ACTIVE = false;\nlet total_films;\nlet prevSearch = '';\nconst keyMovieFetch = new KeyMovieFetch();\n\nrefs.searchForm.addEventListener('submit', onSearchSubmit);\n// // refs.loadMoreBtn.addEventListener('click', onLoadMoreClick);\n\nasync function onSearchSubmit(evt) {\n  try {\n    evt.preventDefault();\n    evt.stopPropagation();\n    refs.paginationCont.classList.remove('is-hidden');\n    // refs.gallery.innerHTML = '';\n    keyMovieFetch.resetPage();\n    // console.log(evt.currentTarget.elements.searchQuery.value);\n    keyMovieFetch.value = evt.currentTarget.elements.searchQuery.value;\n    if (keyMovieFetch.value === '') {\n      //   refs.loadMoreBtn.classList.add('is-hidden');\n      refs.searchMessage.classList.remove('is-hidden');\n      // refs.paginationCont.classList.add('is-hidden');\n      SEARCH_ACTIVE = false;\n      requireData.page = 1;\n      loadPage();\n      refs.searchMessage.innerHTML =\n        'I can`t find an empty request. Please input something.';\n      // console.log('I can`t find an empty request. Please input something.');\n      // refs.gallery.innerHTML = '';\n      // setTimeout(() => {\n      //   refs.searchMessage.innerHTML = '';\n      // }, 1000);\n      return;\n    }\n    if (keyMovieFetch.value !== '') {\n      const fetch = await keyMovieFetch.fetchMovie(keyMovieFetch.value);\n      // console.log('fetch', fetch);\n      total_films = fetch.total_results;\n      // console.log(total_films);\n      if (fetch.total_results) {\n        prevSearch = keyMovieFetch.value;\n        keyMovieFetch.value;\n        refs.gallery.innerHTML = '';\n        pagination.reset(fetch.total_results);\n        const { results } = fetch;\n\n        const CheckImgUrl = filmCheckImgUrl(results);\n        // console.log('fetch in SearchSubmit', fetch);\n        // console.log('CheckImgUrl in SearchSubmit', { fetch, ...CheckImgUrl });\n        await createMarkupKey({ ...fetch, ...CheckImgUrl });\n        SEARCH_ACTIVE = true;\n        // console.log('SEARCH_ACTIVE', SEARCH_ACTIVE);\n      }\n\n      // console.log(fetch);\n    }\n    if (total_films === 0) {\n      keyMovieFetch.value = prevSearch;\n      refs.searchMessage.classList.remove('is-hidden');\n      // refs.paginationCont.classList.add('is-hidden');\n      refs.searchMessage.innerHTML =\n        'Search result not successful. Enter the correct movie name and try again.';\n      // refs.gallery.innerHTML = '';\n      return;\n    }\n    // refs.loadMoreBtn.classList.remove('is-hidden');\n\n    evt.target.reset();\n  } catch (error) {\n    // refs.loadMoreBtn.classList.add('is-hidden');\n    console.log(error);\n  }\n}\n\n// if (refs.page.classList.contains('header-list__link--current')) {\n//   onLoadMore();\n// }\n\n// async function onLoadMore() {\n//   await renderGallery();\n//   // console.log('gallery in onloadmore', gallery);\n//   // pagination.reset(total_films);\n// }\n\nasync function renderGalleryKey() {\n  // refs.gallery.innerHTML = '';\n  if (keyMovieFetch.value !== '') {\n    const fetch = await keyMovieFetch.fetchMovie(keyMovieFetch.value);\n    // console.log('fetch in render', fetch);\n    const { results } = fetch;\n\n    const CheckImgUrl = filmCheckImgUrl(results);\n    // console.log('fetch in SearchSubmit', fetch);\n    // console.log('CheckImgUrl in SearchSubmit', { fetch, ...CheckImgUrl });\n    await createMarkupKey({ ...fetch, ...CheckImgUrl });\n    // await createMarkupKey(fetch);\n    // pagination.reset(fetch.total_results);\n    // pagination.reset(total_films);\n  } else return;\n}\n\nfunction matchGenres(genreIdArr, genresFool) {\n  let result = [];\n\n  genreIdArr.forEach(genreId => {\n    const matchGenre = genresFool.find(genre => genreId === genre.id);\n\n    if (matchGenre) {\n      result.push(matchGenre.name);\n    }\n  });\n  return result;\n}\n\nasync function createMarkupKey(data) {\n  refs.gallery.innerHTML = '';\n  refs.searchMessage.classList.add('is-hidden');\n\n  //   const films = data.results;\n\n  const markup = data.results\n    .map(({ id, poster_path, title, release_date, genre_ids }) => {\n      let year;\n\n      if (release_date !== undefined) {\n        if (release_date.length > 4) {\n          year = release_date.slice(0, 4);\n        } else {\n          year = 'There is no info';\n        }\n      } else {\n        year = 'There is no info';\n      }\n\n      const genr = matchGenres(genre_ids, GENRES_FULL_INFO);\n\n      let formatedGenres;\n      if (!genr.length) {\n        formatedGenres = ['There is no info'];\n      } else if (genr.length > 2) {\n        const genresList = genr.slice(0, 2);\n        genresList.push('Other');\n\n        formatedGenres = genresList.join(', ');\n      } else {\n        formatedGenres = genr.join(', ');\n      }\n\n      return `\n      <li class=\"card-set__item\" id=\"${id}\">\n      <a href='#' id='${id}' class=\"card-link\">\n      <picture>\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w780/${poster_path} 1x,\n                   http://image.tmdb.org/t/p/original/${poster_path} 2x\" media=\"(min-width: 1280px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w342/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w500/${poster_path} 2x\" media=\"(min-width: 768px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w185/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w342/${poster_path} 2x\" media=\"(max-width: 480px)\" type=\"image/jpeg\" />\n         <img id=\"${id}\n          loading=\"lazy\"\n          src=\"http://image.tmdb.org/t/p/w342/${poster_path}\"\n          alt=\"${title}\"\n          class=\"card-set__img \"/>\n      </picture>\n     \n      <h3 class=\"card-set__title\">${title}</h3>\n      <div class=\"card-set__description\" id=\"${id}\">\n      <span class=\"card-set__genre\" id=\"${id}\"> ${formatedGenres} &nbsp| ${year}</span>\n        </div>\n      </a>\n      </li>\n      `;\n    })\n    .join('');\n  addToHTML(markup);\n}\n\npagination.on('afterMove', event => {\n  const currentPage = event.page;\n  if (SEARCH_ACTIVE) {\n    const currentPage = event.page;\n    // console.log(currentPage);\n    // console.log(keyMovieFetch.page);\n    keyMovieFetch.page = currentPage;\n    renderGalleryKey();\n    topFunction();\n  } else {\n    onPaginLoadMore(currentPage);\n    topFunction();\n  }\n});\n","import axios from 'axios';\n\nconst URL_KEY = 'd2c21f22a2d4ccc40e22a6b0b1329764';\n\nexport default class KeyMovieFetch {\n  constructor() {\n    this.inputValue = '';\n    this.page = 1;\n    this.genres = '';\n    // this.per_page = 40;\n    // this.summaryHits = 0;\n    // this.loadMore = document.querySelector('.load-more__btn');\n  }\n\n  async fetchMovie() {\n    try {\n      const url = 'https://api.themoviedb.org/3/search/movie';\n      //   this.loadMore.classList.add('is-hidden');\n      const response = await axios.get(url, {\n        params: {\n          api_key: URL_KEY,\n          query: this.inputValue,\n          page: this.page,\n        },\n      });\n      this.incrementPage();\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async getGenre() {\n    try {\n      const url =\n        'https://api.themoviedb.org/3/genre/movie/list?&language=en-US`';\n      //   this.loadMore.classList.add('is-hidden');\n      const response = await axios.get(url, {\n        params: {\n          api_key: URL_KEY,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get value() {\n    return this.inputValue;\n  }\n  set value(newValue) {\n    this.inputValue = newValue;\n  }\n}\n",null,"const mybutton = document.querySelector('.back-to-top');\nmybutton.addEventListener('click', topFunction);\n\nwindow.onscroll = function () {\n  scrollFunction();\n};\n\nfunction scrollFunction() {\n  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\n    mybutton.style.display = 'block';\n  } else {\n    mybutton.style.display = 'none';\n  }\n}\n\nexport function topFunction() {\n  // document.body.scrollTop = 0;\n  // document.documentElement.scrollTop = 0;\n\n  document.body.scrollIntoView({\n    behavior: 'smooth',\n  });\n}\n"],"names":["parcelRequire","$bpxeT","$115ae4e0f3758354$var$URL_KEY","$115ae4e0f3758354$export$2e2bcd8739ae039","KeyMovieFetch","this","inputValue","page","genres","key","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","get","params","api_key","query","_this","_ctx","sent","incrementPage","data","console","log","t0","message","newValue","$c3a37a8f68db6f41$var$mybutton","document","querySelector","$c3a37a8f68db6f41$export$fe377cc3ceec5d02","body","scrollIntoView","behavior","addEventListener","window","onscroll","scrollTop","documentElement","style","display","$7d7a82d83cf4dcfc$var$total_films","$7d7a82d83cf4dcfc$var$refs","searchForm","gallery","searchMessage","paginationCont","getElementById","$7d7a82d83cf4dcfc$var$SEARCH_ACTIVE","$7d7a82d83cf4dcfc$var$prevSearch","$7d7a82d83cf4dcfc$var$keyMovieFetch","$7d7a82d83cf4dcfc$var$_onSearchSubmit","evt","fetch","results","CheckImgUrl","preventDefault","stopPropagation","classList","remove","resetPage","value","currentTarget","elements","searchQuery","$3xVQP","requireData","loadPage","innerHTML","fetchMovie","total_results","$jcFG7","pagination","reset","$31aCh","filmCheckImgUrl","$7d7a82d83cf4dcfc$var$createMarkupKey","$dDDEV","target","apply","arguments","$7d7a82d83cf4dcfc$var$_renderGalleryKey","$7d7a82d83cf4dcfc$var$matchGenres","genreIdArr","genresFool","result","forEach","genreId","matchGenre","find","genre","id","push","name","$7d7a82d83cf4dcfc$var$_createMarkupKey","markup","add","map","param","year","poster_path","title","release_date","genre_ids","undefined","length","slice","formatedGenres","genr","GENRES_FULL_INFO","genresList","join","concat","addToHTML","on","event","currentPage","currentPage1","$7d7a82d83cf4dcfc$var$renderGalleryKey","onPaginLoadMore"],"version":3,"file":"index.a37db880.js.map"}